# Set the path to the plant image folder
pics_dir <- system.file("plantpics/images", package = "urbanforaging")
if (pics_dir == "") pics_dir <- file.path(rprojroot::find_root("DESCRIPTION"), # fallback path
"inst/plantpics/images")
addResourcePath("plantpics", pics_dir) # Register the image folder so Shiny can use it properly
# ── Load edible_plants.csv ────────────────────────────────────────────────────
# Here we load the main data file with info about edible plants.
# We also clean it up so it’s ready to use in the app.
# Find the path to the CSV file, using a backup path if needed
csv <- system.file("extdata/edible_plants.csv", package = "urbanforaging")
if (csv == "") csv <- file.path("inst/extdata/edible_plants.csv")
# Read the CSV file and adjust encoding so characters look right
plants_raw <- read_csv(csv, locale = locale(encoding = "Latin1"),
show_col_types = FALSE) %>%
mutate(across(where(is.character), \(x) iconv(x, from = "Latin1", to = "UTF-8", sub = "")))
plants_df <- plants_raw %>%
mutate(
img   = ifelse(grepl("^https?://", img), img,
gsub(" ", "%20", file.path("/plantpics", basename(img)), fixed = TRUE)), # make image paths web-friendly
label = ifelse(is.na(label) | label == "", "(unknown)", label), # fallback if no label
sci   = ifelse(is.na(sci),  "", sci), # fill blanks with empty strings
info  = ifelse(is.na(info), "", info),
infourl  = ifelse(is.na(infourl), "", infourl)
)
# ── Generate selection options from plant data ─────────────────────────────
# These are used in the UI to let users select plants by either their common or scientific name.
# Tab 1 shows plant labels (common names), Tab 2 uses scientific names for GBIF lookups.
# Options for Tab 1 — users select by common name (label)
select_options <- pmap(plants_df, function(label, sci, img, ...) {
list(value = label, label = label, sci = sci, img = img)
})
# Options for Tab 2 — users select by scientific name (sci)
select_options_gbif <- pmap(plants_df, function(label, sci, img, ...) {
list(value = sci, label = label, sci = sci, img = img)
})
# ── Foraging spots CSV ─────────────────────────────────────────────────────
# This handles loading and saving the user-generated list of foraging spots.
# Try to find the CSV file where foraging spots are stored
spots_csv <- system.file("app/foraging_spots.csv", package = "urbanforaging")
if (spots_csv == "") spots_csv <- file.path(rprojroot::find_root("DESCRIPTION"),
"inst/app/foraging_spots.csv")
# If no file exists yet, create an empty one so the app can still run
if (!file.exists(spots_csv)) {
dir.create(dirname(spots_csv), recursive = TRUE, showWarnings = FALSE)
write_csv(tibble(plant=character(), lat=numeric(), lon=numeric(),
month=character(), notes=character(), photo=character()),
spots_csv)
}
# Load the spots into a reactive value so the app can respond to changes
spots_rv  <- reactiveVal(read_csv(spots_csv, show_col_types = FALSE))
# ── JS map centre fetcher ───────────────────────────────────────────────────
# Adds a JS handler that grabs the current center of the Leaflet map
# and sends it to the Shiny app as 'map_center'.
js <- "Shiny.addCustomMessageHandler('getCentre',function(msg){var m=$('#map').data('leaflet-map');if(m){var c=m.getCenter();Shiny.setInputValue('map_center',{lat:c.lat,lng:c.lng});}});"
# ── UI ──────────────────────────────────────────────────────────────────────
# This sets up the overall layout of the app: header, tabs, and JS integration.
ui <- fluidPage(
tags$head(tags$script(HTML(js))), # Include custom JS to track map center
titlePanel("Urban Foraging Map – Amsterdam"), # App title at the top
tabsetPanel( # Everything inside here is split into tabs
# Tab 1 — Community spots
# Users can log and view foraging spots shared by the community.
# They select a plant, describe the spot, and add it to the map.
tabPanel("Community spots",
sidebarLayout(
sidebarPanel(
# Dropdown to pick a plant (with images and scientific names)
selectizeInput("plant_pick", "Plant", choices = NULL,
options = list(
valueField = "label",
labelField = "label",
searchField = c("label", "sci"),
options = select_options,
render = I("{
option: function(item, escape) {
return '<div style=\"display:flex;align-items:center\">' +
'<img src=\"' + item.img + '\" height=\"30\" style=\"margin-right:6px\" onerror=\"this.onerror=null;this.src=\\'/www/noimage.png\\';\">' +
'<div><b>' + escape(item.label) + '</b> – <i>' + escape(item.sci) + '</i></div></div>';
}
}")
)),
# Pick a season or month
selectInput("month_new", "Season / month", choices = month.name, selected = "April"),
# Optional notes about the spot
textAreaInput("notes", "Notes (optional)", rows = 3),
# Optional photo upload
fileInput("photo", "Photo (optional)", accept = c("image/jpeg", "image/png")),
# Filter to show only selected months on the map
pickerInput("filter_months", "Show months", choices = month.name, selected = month.name, multiple = TRUE),
# Button to add current map center as a new spot
actionButton("add", "Add map centre →", class = "btn-success"),
helpText("Pan/zoom to the location, then press “Add”.")
),
# Map output
mainPanel(leafletOutput("map", height = 600))
)),
# Tab 2 — GBIF lookup
# Lets users search for plant observation data from GBIF (Global Biodiversity Info Facility).
# They choose a plant, set filters, and view the results on a map.
tabPanel("GBIF lookup",
sidebarLayout(
sidebarPanel(
# Dropdown to pick a plant using scientific or common names
selectizeInput("gbif_species", "Plant", choices = NULL,
options = list(
valueField = "sci",
labelField = "label",
searchField = c("label", "sci"),
options = select_options_gbif,
placeholder = "Start typing a plant…",
render = I("{
option: function(item, escape) {
return '<div style=\"display:flex;align-items:center\">' +
'<img src=\"' + item.img + '\" height=\"30\" style=\"margin-right:6px\" onerror=\"this.onerror=null;this.src=\\'/www/noimage.png\\';\">' +
'<div><b>' + escape(item.label) + '</b> – <i>' + escape(item.sci) + '</i></div></div>';
}
}")
)),
# Filter observations by month
pickerInput("gbif_months", "Months", choices = month.name, multiple = TRUE, selected = c("March", "April")),
# Limit number of GBIF records retrieved (this makes sure the map isn't overwhelming and recent entries are prioritized)
numericInput("gbif_limit", "Max records", 500, min = 10, step = 10),
# Start GBIF search
actionButton("gbif_go", "Search GBIF", class = "btn-primary")
),
# Show GBIF data on map and messages below
mainPanel(leafletOutput("gbif_map", height = 600),
verbatimTextOutput("gbif_msg"))
)),
# Tab 3 — Plant catalogue
# A scrollable (alphabetical) list of all plants in the dataset
# for browsing or learning more about each plant.
tabPanel("Plant catalogue",
div(style = "max-height:650px; overflow-y:auto; padding:1rem;",
uiOutput("catalogue_html")))
)
)
# ── Server logic ────────────────────────────────────────────────────────────
# This handles all interactivity: rendering maps, responding to inputs,
# saving new foraging spots, querying GBIF, and building the plant catalogue.
server <- function(input, output, session) {
# Initialize the map for community foraging spots
output$map <- renderLeaflet({
leaflet() %>% addProviderTiles("CartoDB.Positron") %>%
setView(lng = 4.9041, lat = 52.3676, zoom = 12)
})
# Update markers on the map based on selected months
observe({
df <- spots_rv() %>% filter(month %in% input$filter_months)
leafletProxy("map") %>% clearMarkers()
if (nrow(df) == 0) return()
leafletProxy("map") %>% addCircleMarkers(
data = df, lng=~lon, lat=~lat,
popup = ~{
idx <- match(plant, plants_df$label)
paste0(
"<b>", htmlEscape(plant), "</b><br><i>", month, "</i>",
ifelse(nchar(notes), paste0("<br>", htmlEscape(notes)), ""),
"<br><br><strong>Standard image</strong><br>",
"<img src=\"", plants_df$img[idx],
"\" width=\"140\" style=\"margin:4px 0\" onerror=\"this.onerror=null;this.src='/www/noimage.png';\">",
"<br><strong>Description</strong><br>", htmlEscape(plants_df$info[idx]), "<br>",
ifelse(plants_df$infourl[idx] != "",
paste0("<a href=\"", plants_df$infourl[idx], "\" target=\"_blank\">More info</a>"), ""),
ifelse(!is.na(photo),
paste0("<br><br><strong>Your photo</strong><br><img src=\"", photo, "\" width=\"140\">"), "")
)
})
})
observeEvent(input$add, {
req(input$plant_pick, input$month_new, input$map_center)
photo_path <- NA_character_
if (!is.null(input$photo)) {
dir.create(file.path(www_path, "photos"), showWarnings = FALSE)
dest <- file.path(www_path, "photos", input$photo$name)
file.copy(input$photo$datapath, dest, overwrite = TRUE)
photo_path <- file.path("/www/photos", input$photo$name)
}
# Call to our custom function `save_spots()` (defined in R/save_spots.R)
# It adds the new spot to the dataset, saves it to CSV, and updates the reactive state
save_spots(
data = spots_rv(),
plant = input$plant_pick,
lat = input$map_center$lat,
lon = input$map_center$lng,
month = input$month_new,
notes = input$notes,
photo_path = photo_path,
path = spots_csv,
reactive_ref = spots_rv
)
showNotification("Spot added!")
})
# Initialize the GBIF map
output$gbif_map <- renderLeaflet({
leaflet() %>% addProviderTiles("CartoDB.Positron") %>%
setView(lng = 4.9041, lat = 52.3676, zoom = 6)
})
# Handle GBIF search
observeEvent(input$gbif_go, {
req(input$gbif_species, input$gbif_months)
output$gbif_msg <- renderText("Searching …")
tryCatch({
# Call to custom function that queries GBIF for matching observations
df <- get_gbif_occurrences_by_month(
scientific_name = input$gbif_species,
months          = input$gbif_months,
limit           = input$gbif_limit
)
leafletProxy("gbif_map") %>% clearMarkers()
if (nrow(df) == 0) {
output$gbif_msg <- renderText("No records found.")
} else {
leafletProxy("gbif_map") %>% addCircleMarkers(
data = df, lng = ~decimalLongitude, lat = ~decimalLatitude,
radius = 3, fillOpacity = 0.8,
popup = ~paste0(
"<i>", scientificName, "</i><br>",
ifelse(!is.na(country), country, ""),
ifelse(!is.na(year), paste0("<br>", year), "")
))
output$gbif_msg <- renderText(paste(nrow(df), "records plotted."))
}
}, error = \(e) { output$gbif_msg <- renderText(paste("Error:", e$message)) })
})
# Render the plant catalogue as scrollable HTML
output$catalogue_html <- renderUI({
df <- arrange(plants_df, label)
blocks <- split(df, toupper(substr(df$label, 1, 1)))
tags$div(lapply(names(blocks), \(letter) {
blk <- blocks[[letter]]
tagList(
tags$h3(letter, class="mt-3"),
lapply(seq_len(nrow(blk)), \(i) {
pl <- blk[i, ]
tags$div(class="mb-3 d-flex align-items-start",
tags$img(src=pl$img, height=60,
onerror="this.onerror=null;this.src='/www/noimage.png';",
class="me-2 border rounded"),
tags$div(
tags$b(pl$label), " – ", tags$i(pl$sci), tags$br(),
pl$info, tags$br(),
if (pl$infourl != "")
tags$a("More info", href=pl$infourl, target="_blank")
)
)
})
)
}))
})
# Get the initial center of the map once it’s loaded
session$onFlushed(function() session$sendCustomMessage("getCentre", "now"))
}
shinyApp(ui, server)
get_gbif_occurrences_by_month()
get_gbif_occurrences_by_month(Sambucus)
get_gbif_occurrences_by_month("Sambucus")
get_gbif_occurrences_by_month("Sambucus", "March")
urbanforaging::run_uf_app()
# App.R Version without tab 3 but with working dropdown menu
# ---------------------------------------------------------------------------
#  Urban Foraging  •  Shiny App
# ---------------------------------------------------------------------------
# ── 0 • packages ────────────────────────────────────────────────────────────
library(shiny)
library(shinyWidgets)
library(leaflet)
library(dplyr)
library(readr)
library(rprojroot)
library(htmltools)      # htmlEscape()
# (If get_gbif_occurrences_by_month lives in another package, be sure it’s loaded)
# ── 1 • static resource paths ──────────────────────────────────────────────
## 1a • generic www/
www_path <- system.file("www", package = "urbanforaging")
if (www_path == "") www_path <- file.path("inst", "www")
dir.create(www_path, recursive = TRUE, showWarnings = FALSE)
addResourcePath("www", www_path)
## 1b • plantpics/images/
plantpics_dir <- system.file("plantpics/images", package = "urbanforaging")
if (plantpics_dir == "") {
pkg_root <- rprojroot::find_root("DESCRIPTION")
plantpics_dir <- file.path(pkg_root, "inst", "plantpics", "images")
}
addResourcePath("plantpics", plantpics_dir)
# ── 2 • lookup table ───────────────────────────────────────────────────────
lookup_csv <- system.file("extdata/edible_plants.csv", package = "urbanforaging")
if (lookup_csv == "") lookup_csv <- file.path("inst", "extdata", "edible_plants.csv")
plants_df <- read_csv(lookup_csv, show_col_types = FALSE) |>
mutate(
img = ifelse(
grepl("^https?://", img),
img,
gsub(" ", "%20", file.path("/plantpics", basename(img)), fixed = TRUE)
)
)
# ── 3 • community-spot CSV (simplified) ────────────────────────────────────
spots_csv <- system.file("app/foraging_spots.csv", package = "urbanforaging")
if (spots_csv == "") {
pkg_root <- rprojroot::find_root("DESCRIPTION")
spots_csv <- file.path(pkg_root, "inst", "app", "foraging_spots.csv")
}
if (!file.exists(spots_csv)) {
dir.create(dirname(spots_csv), recursive = TRUE, showWarnings = FALSE)
write_csv(tibble(
plant = character(), lat = numeric(), lon = numeric(),
month = character(), notes = character(), photo = character()
), spots_csv)
}
spots_rv <- reactiveVal(read_csv(spots_csv, show_col_types = FALSE))
save_spots <- function(df) { write_csv(df, spots_csv); spots_rv(df) }
# ── 4 • javascript helper (get map centre) ─────────────────────────────────
js <- "
Shiny.addCustomMessageHandler('getCentre', function(msg){
var map = $('#map').data('leaflet-map');
if (map){
var c = map.getCenter();
Shiny.setInputValue('map_center', {lat: c.lat, lng: c.lng});
}
});
"
# ── 5 • user interface ─────────────────────────────────────────────────────
ui <- fluidPage(
tags$head(tags$script(HTML(js))),
titlePanel('Urban Foraging Map – Amsterdam'),
tabsetPanel(
## TAB 1 — Community spots ------------------------------------------------
tabPanel(
'Community spots',
sidebarLayout(
sidebarPanel(
selectizeInput(
"plant_pick", "Plant",
choices = NULL,
options = list(
valueField  = "label",
labelField  = "label",
searchField = c("label", "sci"),
options = purrr::pmap(
plants_df,
function(label, sci, img, ...) {
list(value = label, label = label, sci = sci, img = img)
}
),
render = I("
{
option: function(item, escape){
return '<div style=\"display:flex;align-items:center\">' +
'<img src=\"' + item.img + '\" height=\"30\" ' +
'style=\"margin-right:6px\" ' +
'onerror=\"this.onerror=null;this.src=\\'/www/noimage.png\\';\">' +
'<div><b>' + escape(item.label) +
'</b> – <i>' + escape(item.sci) + '</i></div></div>';
}
}
")
)
),
selectInput('month_new', 'Season / month',
choices = month.name, selected = 'April'),
textAreaInput('notes', 'Notes (optional)', rows = 3),
fileInput('photo', 'Photo (optional)',
accept = c('image/jpeg', 'image/png')),
pickerInput('filter_months', 'Show months',
choices = month.name, selected = month.name,
multiple = TRUE),
actionButton('add', 'Add map centre →', class = 'btn-success'),
helpText('Pan/zoom to the location, then press “Add”.')
),
mainPanel(leafletOutput('map', height = 600))
)
),
## TAB 2 — GBIF lookup  ----------------------------------------
tabPanel(
'GBIF lookup',
sidebarLayout(
sidebarPanel(
selectizeInput(
'gbif_species', 'Plant',
choices = NULL,
options = list(
valueField  = 'sci',          # value returned is scientific name
labelField  = 'label',        # text shown is common name
searchField = c('label', 'sci'),
options = purrr::pmap(
plants_df,
function(label, sci, img, ...) {
list(value = sci, label = label, sci = sci, img = img)
}
),
placeholder = 'Start typing a plant…',
render = I("{
option: function(item, escape){
return '<div style=\"display:flex;align-items:center\">' +
'<img src=\"' + item.img + '\" height=\"30\" style=\"margin-right:6px\"' +
' onerror=\"this.onerror=null;this.src=\\'/www/noimage.png\\';\">' +
'<div><b>' + escape(item.label) +
'</b> – <i>' + escape(item.sci) + '</i></div></div>';
}
}")
)
),
pickerInput('gbif_months', 'Months',
choices = month.name, multiple = TRUE,
selected = c('March', 'April')),
numericInput('gbif_limit', 'Max records', 500, min = 10, step = 10),
actionButton('gbif_go', 'Search GBIF', class = 'btn-primary')
),
mainPanel(
leafletOutput('gbif_map', height = 600),
verbatimTextOutput('gbif_msg')
)
)
)
)
)
# ── 6 • server logic ───────────────────────────────────────────────────────
server <- function(input, output, session) {
## 6a • Community-spots map logic -----------------------------------------
output$map <- renderLeaflet({
leaflet() %>% addProviderTiles('CartoDB.Positron') %>%
setView(lng = 4.9041, lat = 52.3676, zoom = 12)
})
observe({
df <- spots_rv() %>% filter(month %in% input$filter_months)
leafletProxy('map') %>% clearMarkers()
if (!nrow(df)) return(NULL)
leafletProxy('map') %>%
addCircleMarkers(
data = df, lng = ~lon, lat = ~lat,
popup = ~{
idx <- match(plant, plants_df$label)
paste0(
'<b>', htmlEscape(plant), '</b><br>',
'<i>', month, '</i>',
ifelse(nchar(notes),
paste0('<br>', htmlEscape(notes)),
''),
'<br><br><strong>Standard image</strong><br>',
'<img src=\"', plants_df$img[idx],
'\" width=\"140\" style=\"margin:4px 0\" ',
'onerror=\"this.onerror=null;this.src=\'/www/noimage.png\';\">',
'<br><strong>Description</strong><br>',
htmlEscape(plants_df$info[idx]), '<br>',
'<a href=\"', plants_df$infourl[idx],
'\" target=\"_blank\">More info</a>',
ifelse(!is.na(photo),
paste0('<br><br><strong>Your photo</strong><br>',
'<img src=\"', photo, '\" width=\"140\">'),
'')
)
}
)
})
observeEvent(input$add, {
req(input$plant_pick, input$month_new, input$map_center)
photo_path <- NA_character_
if (!is.null(input$photo)) {
dir.create(file.path(www_path, "photos"), showWarnings = FALSE)
dest <- file.path(www_path, "photos", input$photo$name)
file.copy(input$photo$datapath, dest, overwrite = TRUE)
photo_path <- file.path("/www/photos", input$photo$name)
}
new_row <- tibble(
plant = input$plant_pick,
lat   = input$map_center$lat,
lon   = input$map_center$lng,
month = input$month_new,
notes = input$notes,
photo = photo_path
)
save_spots(bind_rows(spots_rv(), new_row))
showNotification("Spot added!")
})
## 6b • GBIF lookup logic (restored) --------------------------------------
output$gbif_map <- renderLeaflet({
leaflet() %>% addProviderTiles('CartoDB.Positron') %>%
setView(lng = 4.9041, lat = 52.3676, zoom = 6)
})
observeEvent(input$gbif_go, {
req(input$gbif_species, input$gbif_months)
df <- get_gbif_occurrences_by_month(
scientific_name = input$gbif_species,
months          = input$gbif_months,
limit           = input$gbif_limit
)
if (nrow(df) == 0) {
output$gbif_msg <- renderText('No records found.')
leafletProxy('gbif_map') %>% clearMarkers()
} else {
output$gbif_msg <- renderText(paste(nrow(df), 'records displayed.'))
leafletProxy('gbif_map', data = df) %>%
clearMarkers() %>%
addCircleMarkers(~decimalLongitude, ~decimalLatitude,
popup = ~scientificName)
}
})
## 6c • misc --------------------------------------------------------------
session$onFlushed(function() session$sendCustomMessage('getCentre', 'now'))
}
# ── 7 • launch ─────────────────────────────────────────────────────────────
shinyApp(ui, server)
run_uf_app()
urbanforaging::run_uf_app()
tinytex::install_tinytex()
library(tinytex)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
devtools::install()
devtools::install("urbanforaging")
