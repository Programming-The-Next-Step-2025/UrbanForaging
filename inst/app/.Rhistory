output$gbif_map <- renderLeaflet({
leaflet() %>% addProviderTiles("CartoDB.Positron") %>%
setView(lng = 4.9041, lat = 52.3676, zoom = 6)
})
observeEvent(input$gbif_go, {
req(input$gbif_species, input$gbif_months)
output$gbif_msg <- renderText("Searching …")
tryCatch({
df <- get_gbif_occurrences_by_month(
scientific_name = input$gbif_species,
months          = input$gbif_months,
limit           = input$gbif_limit
)
leafletProxy("gbif_map") %>% clearMarkers()
if (nrow(df) == 0) {
output$gbif_msg <- renderText("No records found.")
} else {
leafletProxy("gbif_map") %>% addCircleMarkers(
data = df, lng = ~decimalLongitude, lat = ~decimalLatitude,
radius = 3, fillOpacity = 0.8,
popup = ~paste0(
"<i>", scientificName, "</i><br>",
ifelse(!is.na(country), country, ""),
ifelse(!is.na(year), paste0("<br>", year), "")
))
output$gbif_msg <- renderText(paste(nrow(df), "records plotted."))
}
}, error = \(e) { output$gbif_msg <- renderText(paste("Error:", e$message)) })
})
output$catalogue_html <- renderUI({
df <- arrange(plants_df, label)
blocks <- split(df, toupper(substr(df$label, 1, 1)))
tags$div(lapply(names(blocks), \(letter) {
blk <- blocks[[letter]]
tagList(
tags$h3(letter, class="mt-3"),
lapply(seq_len(nrow(blk)), \(i) {
pl <- blk[i, ]
tags$div(class="mb-3 d-flex align-items-start",
tags$img(src=pl$img, height=60,
onerror="this.onerror=null;this.src='/www/noimage.png';",
class="me-2 border rounded"),
tags$div(
tags$b(pl$label), " – ", tags$i(pl$sci), tags$br(),
pl$info, tags$br(),
if (pl$link != "")
tags$a("More info", href=pl$link, target="_blank")
)
)
})
)
}))
})
session$onFlushed(function() session$sendCustomMessage("getCentre", "now"))
}
shinyApp(ui, server)
# ---------------------------------------------------------------------------
# Urban Foraging • Shiny App
# ---------------------------------------------------------------------------
library(shiny)
library(shinyWidgets)
library(leaflet)
library(dplyr)
library(readr)
library(purrr)
library(rprojroot)
library(htmltools)
# ── Static file paths ───────────────────────────────────────────────────────
www_path <- system.file("www", package = "urbanforaging")
if (www_path == "") www_path <- file.path("inst", "www")
dir.create(www_path, recursive = TRUE, showWarnings = FALSE)
addResourcePath("www", www_path)
pics_dir <- system.file("plantpics/images", package = "urbanforaging")
if (pics_dir == "") pics_dir <- file.path(rprojroot::find_root("DESCRIPTION"),
"inst/plantpics/images")
addResourcePath("plantpics", pics_dir)
# ── edible_plants.csv ───────────────────────────────────────────────────────
csv <- system.file("extdata/edible_plants.csv", package = "urbanforaging")
if (csv == "") csv <- file.path("inst/extdata/edible_plants.csv")
plants_raw <- read_csv(csv, locale = locale(encoding = "Latin1"),
show_col_types = FALSE) %>%
mutate(across(where(is.character), \(x) iconv(x, from = "Latin1", to = "UTF-8", sub = "")))
names(plants_raw) <- tolower(names(plants_raw))
if ("infourl" %in% names(plants_raw) && !"link" %in% names(plants_raw))
plants_raw <- rename(plants_raw, link = infourl)
if (!"link" %in% names(plants_raw)) plants_raw$link <- NA_character_
if (!"img"  %in% names(plants_raw)) plants_raw$img  <- NA_character_
if (!"info" %in% names(plants_raw)) plants_raw$info <- NA_character_
plants_df <- plants_raw %>%
mutate(
img   = ifelse(grepl("^https?://", img), img,
gsub(" ", "%20", file.path("/plantpics", basename(img)), fixed = TRUE)),
label = ifelse(is.na(label) | label == "", "(unknown)", label),
sci   = ifelse(is.na(sci),  "", sci),
info  = ifelse(is.na(info), "", info),
link  = ifelse(is.na(link), "", link)
)
# ── Custom options for pretty dropdowns ─────────────────────────────────────
select_options <- pmap(plants_df, function(label, sci, img, ...) {
list(value = label, label = label, sci = sci, img = img)
})
select_options_gbif <- pmap(plants_df, function(label, sci, img, ...) {
list(value = sci, label = label, sci = sci, img = img)
})
# ── Foraging spots CSV ─────────────────────────────────────────────────────
spots_csv <- system.file("app/foraging_spots.csv", package = "urbanforaging")
if (spots_csv == "") spots_csv <- file.path(rprojroot::find_root("DESCRIPTION"),
"inst/app/foraging_spots.csv")
if (!file.exists(spots_csv)) {
dir.create(dirname(spots_csv), recursive = TRUE, showWarnings = FALSE)
write_csv(tibble(plant=character(), lat=numeric(), lon=numeric(),
month=character(), notes=character(), photo=character()),
spots_csv)
}
spots_rv  <- reactiveVal(read_csv(spots_csv, show_col_types = FALSE))
save_spots <- \(df) { write_csv(df, spots_csv); spots_rv(df) }
# ── JS map centre fetcher ───────────────────────────────────────────────────
js <- "Shiny.addCustomMessageHandler('getCentre',function(msg){var m=$('#map').data('leaflet-map');if(m){var c=m.getCenter();Shiny.setInputValue('map_center',{lat:c.lat,lng:c.lng});}});"
# ── UI ──────────────────────────────────────────────────────────────────────
ui <- fluidPage(
tags$head(tags$script(HTML(js))),
titlePanel("Urban Foraging Map – Amsterdam"),
tabsetPanel(
# Tab 1 — Community spots
tabPanel("Community spots",
sidebarLayout(
sidebarPanel(
selectizeInput("plant_pick", "Plant", choices = NULL,
options = list(
valueField = "label",
labelField = "label",
searchField = c("label", "sci"),
options = select_options,
render = I("{
option: function(item, escape) {
return '<div style=\"display:flex;align-items:center\">' +
'<img src=\"' + item.img + '\" height=\"30\" style=\"margin-right:6px\" onerror=\"this.onerror=null;this.src=\\'/www/noimage.png\\';\">' +
'<div><b>' + escape(item.label) + '</b> – <i>' + escape(item.sci) + '</i></div></div>';
}
}")
)),
selectInput("month_new", "Season / month", choices = month.name, selected = "April"),
textAreaInput("notes", "Notes (optional)", rows = 3),
fileInput("photo", "Photo (optional)", accept = c("image/jpeg", "image/png")),
pickerInput("filter_months", "Show months", choices = month.name, selected = month.name, multiple = TRUE),
actionButton("add", "Add map centre →", class = "btn-success"),
helpText("Pan/zoom to the location, then press “Add”.")
),
mainPanel(leafletOutput("map", height = 600))
)),
# Tab 2 — GBIF lookup
tabPanel("GBIF lookup",
sidebarLayout(
sidebarPanel(
selectizeInput("gbif_species", "Plant", choices = NULL,
options = list(
valueField = "sci",
labelField = "label",
searchField = c("label", "sci"),
options = select_options_gbif,
placeholder = "Start typing a plant…",
render = I("{
option: function(item, escape) {
return '<div style=\"display:flex;align-items:center\">' +
'<img src=\"' + item.img + '\" height=\"30\" style=\"margin-right:6px\" onerror=\"this.onerror=null;this.src=\\'/www/noimage.png\\';\">' +
'<div><b>' + escape(item.label) + '</b> – <i>' + escape(item.sci) + '</i></div></div>';
}
}")
)),
pickerInput("gbif_months", "Months", choices = month.name, multiple = TRUE, selected = c("March", "April")),
numericInput("gbif_limit", "Max records", 500, min = 10, step = 10),
actionButton("gbif_go", "Search GBIF", class = "btn-primary")
),
mainPanel(leafletOutput("gbif_map", height = 600),
verbatimTextOutput("gbif_msg"))
)),
# Tab 3 — Plant catalogue
tabPanel("Plant catalogue",
div(style = "max-height:650px; overflow-y:auto; padding:1rem;",
uiOutput("catalogue_html")))
)
)
server <- function(input, output, session) {
output$map <- renderLeaflet({
leaflet() %>% addProviderTiles("CartoDB.Positron") %>%
setView(lng = 4.9041, lat = 52.3676, zoom = 12)
})
observe({
df <- spots_rv() %>% filter(month %in% input$filter_months)
leafletProxy("map") %>% clearMarkers()
if (nrow(df) == 0) return()
leafletProxy("map") %>% addCircleMarkers(
data = df, lng=~lon, lat=~lat,
popup = ~{
idx <- match(plant, plants_df$label)
paste0(
"<b>", htmlEscape(plant), "</b><br><i>", month, "</i>",
ifelse(nchar(notes), paste0("<br>", htmlEscape(notes)), ""),
"<br><br><strong>Standard image</strong><br>",
"<img src=\"", plants_df$img[idx],
"\" width=\"140\" style=\"margin:4px 0\" onerror=\"this.onerror=null;this.src='/www/noimage.png';\">",
"<br><strong>Description</strong><br>", htmlEscape(plants_df$info[idx]), "<br>",
ifelse(plants_df$link[idx] != "",
paste0("<a href=\"", plants_df$link[idx], "\" target=\"_blank\">More info</a>"), ""),
ifelse(!is.na(photo),
paste0("<br><br><strong>Your photo</strong><br><img src=\"", photo, "\" width=\"140\">"), "")
)
})
})
observeEvent(input$add, {
req(input$plant_pick, input$month_new, input$map_center)
photo_path <- NA_character_
if (!is.null(input$photo)) {
dir.create(file.path(www_path,"photos"), showWarnings=FALSE)
dest <- file.path(www_path,"photos", input$photo$name)
file.copy(input$photo$datapath, dest, overwrite=TRUE)
photo_path <- file.path("/www/photos", input$photo$name)
}
save_spots(bind_rows(spots_rv(), tibble(
plant=input$plant_pick, lat=input$map_center$lat, lon=input$map_center$lng,
month=input$month_new, notes=input$notes, photo=photo_path)))
showNotification("Spot added!")
})
output$gbif_map <- renderLeaflet({
leaflet() %>% addProviderTiles("CartoDB.Positron") %>%
setView(lng = 4.9041, lat = 52.3676, zoom = 6)
})
observeEvent(input$gbif_go, {
req(input$gbif_species, input$gbif_months)
output$gbif_msg <- renderText("Searching …")
tryCatch({
df <- get_gbif_occurrences_by_month(
scientific_name = input$gbif_species,
months          = input$gbif_months,
limit           = input$gbif_limit
)
leafletProxy("gbif_map") %>% clearMarkers()
if (nrow(df) == 0) {
output$gbif_msg <- renderText("No records found.")
} else {
leafletProxy("gbif_map") %>% addCircleMarkers(
data = df, lng = ~decimalLongitude, lat = ~decimalLatitude,
radius = 3, fillOpacity = 0.8,
popup = ~paste0(
"<i>", scientificName, "</i><br>",
ifelse(!is.na(country), country, ""),
ifelse(!is.na(year), paste0("<br>", year), "")
))
output$gbif_msg <- renderText(paste(nrow(df), "records plotted."))
}
}, error = \(e) { output$gbif_msg <- renderText(paste("Error:", e$message)) })
})
output$catalogue_html <- renderUI({
df <- arrange(plants_df, label)
blocks <- split(df, toupper(substr(df$label, 1, 1)))
tags$div(lapply(names(blocks), \(letter) {
blk <- blocks[[letter]]
tagList(
tags$h3(letter, class="mt-3"),
lapply(seq_len(nrow(blk)), \(i) {
pl <- blk[i, ]
tags$div(class="mb-3 d-flex align-items-start",
tags$img(src=pl$img, height=60,
onerror="this.onerror=null;this.src='/www/noimage.png';",
class="me-2 border rounded"),
tags$div(
tags$b(pl$label), " – ", tags$i(pl$sci), tags$br(),
pl$info, tags$br(),
if (pl$link != "")
tags$a("More info", href=pl$link, target="_blank")
)
)
})
)
}))
})
session$onFlushed(function() session$sendCustomMessage("getCentre", "now"))
}
shinyApp(ui, server)
# ---------------------------------------------------------------------------
# Urban Foraging • Shiny App
# ---------------------------------------------------------------------------
library(shiny)
library(shinyWidgets)
library(leaflet)
library(dplyr)
library(readr)
library(purrr)
library(rprojroot)
library(htmltools)
# ── Static file paths ───────────────────────────────────────────────────────
www_path <- system.file("www", package = "urbanforaging")
if (www_path == "") www_path <- file.path("inst", "www")
dir.create(www_path, recursive = TRUE, showWarnings = FALSE)
addResourcePath("www", www_path)
pics_dir <- system.file("plantpics/images", package = "urbanforaging")
if (pics_dir == "") pics_dir <- file.path(rprojroot::find_root("DESCRIPTION"),
"inst/plantpics/images")
addResourcePath("plantpics", pics_dir)
# ── edible_plants.csv ───────────────────────────────────────────────────────
csv <- system.file("extdata/edible_plants.csv", package = "urbanforaging")
if (csv == "") csv <- file.path("inst/extdata/edible_plants.csv")
plants_raw <- read_csv(csv, locale = locale(encoding = "Latin1"),
show_col_types = FALSE) %>%
mutate(across(where(is.character), \(x) iconv(x, from = "Latin1", to = "UTF-8", sub = "")))
names(plants_raw) <- tolower(names(plants_raw))
if ("infourl" %in% names(plants_raw) && !"link" %in% names(plants_raw))
plants_raw <- rename(plants_raw, link = infourl)
if (!"link" %in% names(plants_raw)) plants_raw$link <- NA_character_
if (!"img"  %in% names(plants_raw)) plants_raw$img  <- NA_character_
if (!"info" %in% names(plants_raw)) plants_raw$info <- NA_character_
plants_df <- plants_raw %>%
mutate(
img   = ifelse(grepl("^https?://", img), img,
gsub(" ", "%20", file.path("/plantpics", basename(img)), fixed = TRUE)),
label = ifelse(is.na(label) | label == "", "(unknown)", label),
sci   = ifelse(is.na(sci),  "", sci),
info  = ifelse(is.na(info), "", info),
link  = ifelse(is.na(link), "", link)
)
# ── Custom options for pretty dropdowns ─────────────────────────────────────
select_options <- pmap(plants_df, function(label, sci, img, ...) {
list(value = label, label = label, sci = sci, img = img)
})
select_options_gbif <- pmap(plants_df, function(label, sci, img, ...) {
list(value = sci, label = label, sci = sci, img = img)
})
# ── Foraging spots CSV ─────────────────────────────────────────────────────
spots_csv <- system.file("app/foraging_spots.csv", package = "urbanforaging")
if (spots_csv == "") spots_csv <- file.path(rprojroot::find_root("DESCRIPTION"),
"inst/app/foraging_spots.csv")
if (!file.exists(spots_csv)) {
dir.create(dirname(spots_csv), recursive = TRUE, showWarnings = FALSE)
write_csv(tibble(plant=character(), lat=numeric(), lon=numeric(),
month=character(), notes=character(), photo=character()),
spots_csv)
}
spots_rv  <- reactiveVal(read_csv(spots_csv, show_col_types = FALSE))
save_spots <- \(df) { write_csv(df, spots_csv); spots_rv(df) }
# ── JS map centre fetcher ───────────────────────────────────────────────────
js <- "Shiny.addCustomMessageHandler('getCentre',function(msg){var m=$('#map').data('leaflet-map');if(m){var c=m.getCenter();Shiny.setInputValue('map_center',{lat:c.lat,lng:c.lng});}});"
# ── UI ──────────────────────────────────────────────────────────────────────
ui <- fluidPage(
tags$head(tags$script(HTML(js))),
titlePanel("Urban Foraging Map – Amsterdam"),
tabsetPanel(
# Tab 1 — Community spots
tabPanel("Community spots",
sidebarLayout(
sidebarPanel(
selectizeInput("plant_pick", "Plant", choices = NULL,
options = list(
valueField = "label",
labelField = "label",
searchField = c("label", "sci"),
options = select_options,
render = I("{
option: function(item, escape) {
return '<div style=\"display:flex;align-items:center\">' +
'<img src=\"' + item.img + '\" height=\"30\" style=\"margin-right:6px\" onerror=\"this.onerror=null;this.src=\\'/www/noimage.png\\';\">' +
'<div><b>' + escape(item.label) + '</b> – <i>' + escape(item.sci) + '</i></div></div>';
}
}")
)),
selectInput("month_new", "Season / month", choices = month.name, selected = "April"),
textAreaInput("notes", "Notes (optional)", rows = 3),
fileInput("photo", "Photo (optional)", accept = c("image/jpeg", "image/png")),
pickerInput("filter_months", "Show months", choices = month.name, selected = month.name, multiple = TRUE),
actionButton("add", "Add map centre →", class = "btn-success"),
helpText("Pan/zoom to the location, then press “Add”.")
),
mainPanel(leafletOutput("map", height = 600))
)),
# Tab 2 — GBIF lookup
tabPanel("GBIF lookup",
sidebarLayout(
sidebarPanel(
selectizeInput("gbif_species", "Plant", choices = NULL,
options = list(
valueField = "sci",
labelField = "label",
searchField = c("label", "sci"),
options = select_options_gbif,
placeholder = "Start typing a plant…",
render = I("{
option: function(item, escape) {
return '<div style=\"display:flex;align-items:center\">' +
'<img src=\"' + item.img + '\" height=\"30\" style=\"margin-right:6px\" onerror=\"this.onerror=null;this.src=\\'/www/noimage.png\\';\">' +
'<div><b>' + escape(item.label) + '</b> – <i>' + escape(item.sci) + '</i></div></div>';
}
}")
)),
pickerInput("gbif_months", "Months", choices = month.name, multiple = TRUE, selected = c("March", "April")),
numericInput("gbif_limit", "Max records", 500, min = 10, step = 10),
actionButton("gbif_go", "Search GBIF", class = "btn-primary")
),
mainPanel(leafletOutput("gbif_map", height = 600),
verbatimTextOutput("gbif_msg"))
)),
# Tab 3 — Plant catalogue
tabPanel("Plant catalogue",
div(style = "max-height:650px; overflow-y:auto; padding:1rem;",
uiOutput("catalogue_html")))
)
)
server <- function(input, output, session) {
output$map <- renderLeaflet({
leaflet() %>% addProviderTiles("CartoDB.Positron") %>%
setView(lng = 4.9041, lat = 52.3676, zoom = 12)
})
observe({
df <- spots_rv() %>% filter(month %in% input$filter_months)
leafletProxy("map") %>% clearMarkers()
if (nrow(df) == 0) return()
leafletProxy("map") %>% addCircleMarkers(
data = df, lng=~lon, lat=~lat,
popup = ~{
idx <- match(plant, plants_df$label)
paste0(
"<b>", htmlEscape(plant), "</b><br><i>", month, "</i>",
ifelse(nchar(notes), paste0("<br>", htmlEscape(notes)), ""),
"<br><br><strong>Standard image</strong><br>",
"<img src=\"", plants_df$img[idx],
"\" width=\"140\" style=\"margin:4px 0\" onerror=\"this.onerror=null;this.src='/www/noimage.png';\">",
"<br><strong>Description</strong><br>", htmlEscape(plants_df$info[idx]), "<br>",
ifelse(plants_df$link[idx] != "",
paste0("<a href=\"", plants_df$link[idx], "\" target=\"_blank\">More info</a>"), ""),
ifelse(!is.na(photo),
paste0("<br><br><strong>Your photo</strong><br><img src=\"", photo, "\" width=\"140\">"), "")
)
})
})
observeEvent(input$add, {
req(input$plant_pick, input$month_new, input$map_center)
photo_path <- NA_character_
if (!is.null(input$photo)) {
dir.create(file.path(www_path,"photos"), showWarnings=FALSE)
dest <- file.path(www_path,"photos", input$photo$name)
file.copy(input$photo$datapath, dest, overwrite=TRUE)
photo_path <- file.path("/www/photos", input$photo$name)
}
save_spots(bind_rows(spots_rv(), tibble(
plant=input$plant_pick, lat=input$map_center$lat, lon=input$map_center$lng,
month=input$month_new, notes=input$notes, photo=photo_path)))
showNotification("Spot added!")
})
output$gbif_map <- renderLeaflet({
leaflet() %>% addProviderTiles("CartoDB.Positron") %>%
setView(lng = 4.9041, lat = 52.3676, zoom = 6)
})
observeEvent(input$gbif_go, {
req(input$gbif_species, input$gbif_months)
output$gbif_msg <- renderText("Searching …")
tryCatch({
df <- get_gbif_occurrences_by_month(
scientific_name = input$gbif_species,
months          = input$gbif_months,
limit           = input$gbif_limit
)
leafletProxy("gbif_map") %>% clearMarkers()
if (nrow(df) == 0) {
output$gbif_msg <- renderText("No records found.")
} else {
leafletProxy("gbif_map") %>% addCircleMarkers(
data = df, lng = ~decimalLongitude, lat = ~decimalLatitude,
radius = 3, fillOpacity = 0.8,
popup = ~paste0(
"<i>", scientificName, "</i><br>",
ifelse(!is.na(country), country, ""),
ifelse(!is.na(year), paste0("<br>", year), "")
))
output$gbif_msg <- renderText(paste(nrow(df), "records plotted."))
}
}, error = \(e) { output$gbif_msg <- renderText(paste("Error:", e$message)) })
})
output$catalogue_html <- renderUI({
df <- arrange(plants_df, label)
blocks <- split(df, toupper(substr(df$label, 1, 1)))
tags$div(lapply(names(blocks), \(letter) {
blk <- blocks[[letter]]
tagList(
tags$h3(letter, class="mt-3"),
lapply(seq_len(nrow(blk)), \(i) {
pl <- blk[i, ]
tags$div(class="mb-3 d-flex align-items-start",
tags$img(src=pl$img, height=60,
onerror="this.onerror=null;this.src='/www/noimage.png';",
class="me-2 border rounded"),
tags$div(
tags$b(pl$label), " – ", tags$i(pl$sci), tags$br(),
pl$info, tags$br(),
if (pl$link != "")
tags$a("More info", href=pl$link, target="_blank")
)
)
})
)
}))
})
session$onFlushed(function() session$sendCustomMessage("getCentre", "now"))
}
shinyApp(ui, server)
library(urbanforaging)
usethis::use_package("shiny")
usethis::use_package("shinyWidgets")
usethis::use_package("leaflet")
usethis::use_package("dplyr")
usethis::use_package("readr")
usethis::use_package("purrr")
usethis::use_package("rprojroot")
usethis::use_package("htmltools")
devtools::document()
